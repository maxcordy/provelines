/*
 * NeverClaim.hpp
 *
 * Created on 2013-08-04
 */

#ifndef NEVERCLAIM_NEVERCLAIM_HPP
#define NEVERCLAIM_NEVERCLAIM_HPP

#include "forwards.hpp"
#include "ClaimState.hpp"
#include "ClaimTransition.hpp"
#include "util/Generator.hpp"
#include "util/StdHashTable.hpp"
#include "util/Uncopyable.hpp"

#include <memory>
#include <tr1/unordered_map>

namespace neverclaim {

/**
 * NeverClaim is an immutable never claim automaton.
 *
 * @author mwi
 */
class NeverClaim : private util::Uncopyable {

private:
    /* Temp file path to use with ltl2ba */
    static const std::string NeverClaimFilePath;

    util::StdHashTable<ClaimState, ClaimTransitionPtr> transitionTable;
    std::tr1::shared_ptr<ClaimState> initialState;

    /*
     * Representation Invariant:
     *   I(c) = c.transitionTable.size > 0
     *     c.initialState != null
     */

public:
    /**
     * @requires transGen != null && transGen generates at least one transition
     *            && the source state of the first transition generated by
     *            transGen is the initial state of this
     * @effects Makes this be a new never claim automaton with the transitions
     *           generated by 'transGen'.
     */
    NeverClaim(const ClaimTransitionGeneratorPtr & transGen);

    /**
     * @return the initial state of this.
     */
    std::tr1::shared_ptr<ClaimState> getInitialState() const;

    /**
     * @return a generator that will produce all the transitions (as
     *          ClaimTransitions) leaving the state 'state', each exactly once,
     *          in arbitrary order.
     */
    ClaimTransitionGeneratorPtr executables(const ClaimState & state) const;

    /**
     * @requires ltl is a valid LTL formula using Spin syntax
     * @return a new never claim automaton that allows the verification of the
     *          the LTL property 'ltl'.
     */
    static std::tr1::shared_ptr<NeverClaim> create(const std::string & ltl);

private:
    /**
     * @effects Asserts the rep invariant holds for this.
     */
    void checkRep() const;
};

} // namespace neverclaim

#endif /* NEVERCLAIM_NEVERCLAIM_HPP */
